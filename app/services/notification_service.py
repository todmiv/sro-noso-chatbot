from typing import List, Optional
import asyncio
from aiogram import Bot
from datetime import datetime, timedelta

from config.settings import config
from app.database.connection import get_async_session
from app.database.repositories.user_repository import UserRepository
from app.models.user import User


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    
    def __init__(self):
        self.bot = Bot(token=config.bot.token)
        self.admin_ids = getattr(config, 'admin_ids', [])
    
    async def send_notification_to_user(self, user_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            await self.bot.send_message(user_id, message)
            return True
        except Exception as e:
            print(f"Failed to send notification to user {user_id}: {e}")
            return False
    
    async def send_notification_to_members(self, message: str) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º –°–†–û."""
        sent_count = 0
        
        async with get_async_session() as session:
            user_repo = UserRepository(session)
            members = await user_repo.get_members()
            
            for member in members:
                if await self.send_notification_to_user(member.telegram_id, message):
                    sent_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(0.1)
        
        return sent_count
    
    async def send_notification_to_all_users(self, message: str) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        sent_count = 0
        
        async with get_async_session() as session:
            user_repo = UserRepository(session)
            users = await user_repo.get_all_active_users()
            
            for user in users:
                if await self.send_notification_to_user(user.telegram_id, message):
                    sent_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    await asyncio.sleep(0.1)
        
        return sent_count
    
    async def notify_admins_about_error(
        self, 
        error: str, 
        user_id: Optional[int] = None, 
        update_id: Optional[int] = None
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ."""
        error_message = (
            f"üö® **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ**\n\n"
            f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"**–û—à–∏–±–∫–∞:** {error}\n"
        )
        
        if user_id:
            error_message += f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_id}\n"
        
        if update_id:
            error_message += f"**Update ID:** {update_id}\n"
        
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(admin_id, error_message, parse_mode="Markdown")
            except Exception as e:
                print(f"Failed to notify admin {admin_id}: {e}")
    
    async def notify_about_new_user(self, user: User) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        message = (
            f"üë§ **–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**\n\n"
            f"**–ò–º—è:** {user.first_name} {user.last_name or ''}\n"
            f"**Username:** @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"**Telegram ID:** {user.telegram_id}\n"
            f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {user.organization_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date.strftime('%d.%m.%Y %H:%M')}"
        )
        
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(admin_id, message, parse_mode="Markdown")
            except Exception:
                pass
    
    async def notify_about_document_update(self, document_title: str, document_id: int) -> int:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        message = (
            f"üìÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: **{document_title}**\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /documents –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —á–ª–µ–Ω–∞–º –°–†–û
        return await self.send_notification_to_members(message)
    
    async def send_scheduled_reminder(self, reminder_text: str, target_group: str = "members") -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        message = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n{reminder_text}"
        
        if target_group == "members":
            return await self.send_notification_to_members(message)
        elif target_group == "all":
            return await self.send_notification_to_all_users(message)
        else:
            return 0
    
    async def notify_about_system_maintenance(self, start_time: datetime, duration: timedelta) -> int:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö."""
        end_time = start_time + duration
        
        message = (
            f"üõ†Ô∏è **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**\n\n"
            f"**–ù–∞—á–∞–ª–æ:** {start_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ:** {end_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration.seconds // 3600} —á {(duration.seconds % 3600) // 60} –º–∏–Ω\n\n"
            f"–í —ç—Ç–æ –≤—Ä–µ–º—è –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        )
        
        return await self.send_notification_to_all_users(message)
    
    async def send_membership_expiration_warning(self, user_id: int, days_left: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —á–ª–µ–Ω—Å—Ç–≤–∞."""
        message = (
            f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —á–ª–µ–Ω—Å—Ç–≤–µ**\n\n"
            f"–í–∞—à–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –°–†–û –ù–û–°–û –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å –°–†–û –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ."
        )
        
        return await self.send_notification_to_user(user_id, message)
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º."""
        await self.bot.session.close()
