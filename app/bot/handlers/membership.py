from aiogram import Router, types
from aiogram.filters import Command

from app.services.user_service import UserService
from app.services.sro_registry_service import SRORegistryService
from app.bot.keyboards.inline_keyboards import get_membership_keyboard

router = Router()


@router.message(Command(commands=['membership']))
async def cmd_membership(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω—Å—Ç–≤–µ –≤ –°–†–û."""
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    if user.is_member:
        membership_text = (
            f"‚úÖ **–°—Ç–∞—Ç—É—Å —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –°–†–û –ù–û–°–û**\n\n"
            f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {user.organization_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"**–°—Ç–∞—Ç—É—Å:** –î–µ–π—Å—Ç–≤—É—é—â–∏–π —á–ª–µ–Ω –°–†–û\n"
            f"**–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:** {user.registration_date.strftime('%d.%m.%Y') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:**\n"
            f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –°–†–û\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
        )
    else:
        membership_text = (
            f"‚ùå **–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –°–†–û –ù–û–°–û**\n\n"
            f"**–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –°–†–û –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**\n"
            f"‚Ä¢ –ë—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º –∏–ª–∏ –ò–ü\n"
            f"‚Ä¢ –ò–º–µ—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –∫–∞–¥—Ä–æ–≤–æ–º—É —Å–æ—Å—Ç–∞–≤—É\n"
            f"‚Ä¢ –í–Ω–µ—Å—Ç–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å\n\n"
            f"**–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:**\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (831) 123-45-67\n"
            f"üìß Email: info@sronoso.ru\n"
            f"üåê –°–∞–π—Ç: https://www.sronoso.ru"
        )
    
    keyboard = get_membership_keyboard(user.is_member)
    await message.answer(membership_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(lambda c: c.data == "check_membership")
async def check_membership_status(callback: types.CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û."""
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.organization_name:
        await callback.message.answer(
            "‚ùå –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    checking_message = await callback.message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û...")
    
    try:
        sro_service = SRORegistryService()
        membership_info = await sro_service.check_membership_status(user.organization_name)
        
        if membership_info:
            result_text = (
                f"‚úÖ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {membership_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"**–ò–ù–ù:** {membership_info.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"**–°—Ç–∞—Ç—É—Å:** {membership_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"**–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:** {membership_info.get('join_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"**–°–†–û:** {membership_info.get('sro_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
        else:
            result_text = (
                f"‚ùå **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û**\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –°–†–û\n"
                f"‚Ä¢ –ù–µ—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
                f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–µ—Å—Ç—Ä–æ–º\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –°–†–û –ù–û–°–û."
            )
        
        await checking_message.edit_text(result_text, parse_mode="Markdown")
        
    except Exception as e:
        await checking_message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
    
    await callback.answer()


@router.callback_query(lambda c: c.data == "membership_benefits")
async def show_membership_benefits(callback: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –°–†–û."""
    benefits_text = (
        f"üéØ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –°–†–û –ù–û–°–û:**\n\n"
        f"**–ü—Ä–∞–≤–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        f"‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏\n"
        f"‚Ä¢ –ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –°–†–û\n"
        f"‚Ä¢ –ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ –≥–æ—Å–æ—Ä–≥–∞–Ω–∞—Ö\n\n"
        f"**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º\n"
        f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
        f"‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
        f"**–î–µ–ª–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö\n"
        f"‚Ä¢ –î–µ–ª–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        f"‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è –∏ –¥–æ–≤–µ—Ä–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"
    )
    
    await callback.message.answer(benefits_text, parse_mode="Markdown")
    await callback.answer()
