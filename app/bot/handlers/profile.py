from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.user_service import UserService
from app.bot.keyboards.inline_keyboards import get_profile_keyboard

router = Router()


class ProfileStates(StatesGroup):
    editing_organization = State()
    editing_contact = State()


@router.message(Command(commands=['profile']))
async def cmd_profile(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    profile_text = (
        f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
        f"**–ò–º—è:** {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–§–∞–º–∏–ª–∏—è:** {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**Username:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {user.organization_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–°—Ç–∞—Ç—É—Å —á–ª–µ–Ω—Å—Ç–≤–∞:** {'‚úÖ –ß–ª–µ–Ω –°–†–û' if user.is_member else '‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º'}\n"
        f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date.strftime('%d.%m.%Y') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )
    
    keyboard = get_profile_keyboard(user.is_member)
    await message.answer(profile_text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(lambda c: c.data == "edit_organization")
async def edit_organization(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."""
    await state.set_state(ProfileStates.editing_organization)
    await callback.message.answer(
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()


@router.message(ProfileStates.editing_organization)
async def save_organization(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."""
    if len(message.text) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    user_service = UserService()
    await user_service.update_organization(message.from_user.id, message.text)
    
    await message.answer(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")
    await state.clear()


@router.callback_query(lambda c: c.data == "cancel_edit")
async def cancel_edit(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è."""
    await state.clear()
    await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(lambda c: c.data == "refresh_profile")
async def refresh_profile(callback: types.CallbackQuery) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è."""
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    profile_text = (
        f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):**\n\n"
        f"**–ò–º—è:** {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–§–∞–º–∏–ª–∏—è:** {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**Username:** @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {user.organization_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–°—Ç–∞—Ç—É—Å —á–ª–µ–Ω—Å—Ç–≤–∞:** {'‚úÖ –ß–ª–µ–Ω –°–†–û' if user.is_member else '‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º'}\n"
        f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date.strftime('%d.%m.%Y') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )
    
    keyboard = get_profile_keyboard(user.is_member)
    await callback.message.edit_text(profile_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer("üîÑ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
