from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional


def get_main_menu_keyboard(is_member: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    buttons = [
        [InlineKeyboardButton(text="üìö –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="documents")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üè¢ –ß–ª–µ–Ω—Å—Ç–≤–æ", callback_data="membership")]
    ]
    
    if is_member:
        buttons.append([InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")])
    
    buttons.append([InlineKeyboardButton(text="‚ÑπÔ∏è –û –°–†–û –ù–û–°–û", callback_data="about_sro")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_profile_keyboard(is_member: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è."""
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", callback_data="edit_organization")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")],
    ]
    
    if not is_member:
        buttons.append([InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="apply_membership")])
    
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_membership_keyboard(is_member: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —á–ª–µ–Ω—Å—Ç–≤–∞."""
    if is_member:
        buttons = [
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_membership")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="my_obligations")],
            [InlineKeyboardButton(text="üí∞ –í–∑–Ω–æ—Å—ã", callback_data="membership_fees")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(text="üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —á–ª–µ–Ω—Å—Ç–≤–∞", callback_data="membership_benefits")],
            [InlineKeyboardButton(text="üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="membership_requirements")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="membership_contacts")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_documents_keyboard(categories: List[str] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    buttons = []
    
    if categories:
        for category in categories:
            buttons.append([InlineKeyboardButton(text=f"üìÑ {category}", callback_data=f"doc_category_{category}")])
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        buttons = [
            [InlineKeyboardButton(text="üìÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –°–†–û", callback_data="doc_category_standards")],
            [InlineKeyboardButton(text="üìã –ü–æ–ª–æ–∂–µ–Ω–∏—è", callback_data="doc_category_regulations")],
            [InlineKeyboardButton(text="üìù –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã", callback_data="doc_category_procedures")],
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã", callback_data="doc_category_reports")],
        ]
    
    buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="search_documents")])
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_consultation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."""
    buttons = [
        [InlineKeyboardButton(text="üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", callback_data="contact_expert")],
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str = "page"
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    buttons = []
    
    if total_pages <= 1:
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{callback_prefix}_{current_page - 1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page"))
    
    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{callback_prefix}_{current_page + 1}"))
    
    buttons.append(nav_buttons)
    
    # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if total_pages > 3:
        quick_nav = []
        if current_page > 2:
            quick_nav.append(InlineKeyboardButton(text="1", callback_data=f"{callback_prefix}_1"))
        if current_page < total_pages - 1:
            quick_nav.append(InlineKeyboardButton(text=str(total_pages), callback_data=f"{callback_prefix}_{total_pages}"))
        
        if quick_nav:
            buttons.append(quick_nav)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)
