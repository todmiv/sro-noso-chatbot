import asyncio
import logging
from typing import Dict, List, Optional, Callable, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import aiohttp

from config.settings import config


class AlertSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞."""
    id: str
    title: str
    description: str
    severity: AlertSeverity
    timestamp: datetime
    source: str
    metadata: Dict[str, Any] = None
    resolved: bool = False
    resolved_at: Optional[datetime] = None


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self):
        self.alerts: Dict[str, Alert] = {}
        self.handlers: List[Callable] = []
        self.logger = logging.getLogger(__name__)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        self.webhook_url = getattr(config, 'alert_webhook_url', None)
        self.telegram_bot_token = getattr(config, 'alert_bot_token', None)
        self.telegram_chat_id = getattr(config, 'alert_chat_id', None)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.deduplication_window = timedelta(minutes=5)
        self.rate_limit_window = timedelta(minutes=1)
        self.rate_limit_count = 10
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è rate limiting
        self.alert_counts: Dict[str, List[datetime]] = {}
    
    def add_handler(self, handler: Callable[[Alert], None]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤."""
        self.handlers.append(handler)
    
    async def send_alert(
        self,
        alert_id: str,
        title: str,
        description: str,
        severity: AlertSeverity = AlertSeverity.MEDIUM,
        source: str = "system",
        metadata: Dict[str, Any] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç."""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if not self._check_rate_limit(alert_id):
            self.logger.warning(f"Rate limit exceeded for alert {alert_id}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        if self._is_duplicate(alert_id, title, description):
            self.logger.debug(f"Duplicate alert ignored: {alert_id}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        alert = Alert(
            id=alert_id,
            title=title,
            description=description,
            severity=severity,
            timestamp=datetime.now(),
            source=source,
            metadata=metadata or {}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç
        self.alerts[alert_id] = alert
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await self._process_alert(alert)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.handlers:
            try:
                await handler(alert)
            except Exception as e:
                self.logger.error(f"Error in alert handler: {e}")
        
        return True
    
    def _check_rate_limit(self, alert_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
        now = datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if alert_id in self.alert_counts:
            self.alert_counts[alert_id] = [
                timestamp for timestamp in self.alert_counts[alert_id]
                if now - timestamp < self.rate_limit_window
            ]
        else:
            self.alert_counts[alert_id] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.alert_counts[alert_id]) >= self.rate_limit_count:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π timestamp
        self.alert_counts[alert_id].append(now)
        return True
    
    def _is_duplicate(self, alert_id: str, title: str, description: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–ª–µ—Ä—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–º."""
        if alert_id not in self.alerts:
            return False
        
        existing_alert = self.alerts[alert_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
        if datetime.now() - existing_alert.timestamp > self.deduplication_window:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        return (
            existing_alert.title == title and
            existing_alert.description == description and
            not existing_alert.resolved
        )
    
    async def _process_alert(self, alert: Alert) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        tasks = []
        
        # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.webhook_url:
            tasks.append(self._send_webhook_notification(alert))
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.telegram_bot_token and self.telegram_chat_id:
            tasks.append(self._send_telegram_notification(alert))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        tasks.append(self._log_alert(alert))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def _send_webhook_notification(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook."""
        try:
            payload = {
                "id": alert.id,
                "title": alert.title,
                "description": alert.description,
                "severity": alert.severity.value,
                "timestamp": alert.timestamp.isoformat(),
                "source": alert.source,
                "metadata": alert.metadata
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.webhook_url,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        self.logger.info(f"Webhook notification sent for alert {alert.id}")
                    else:
                        self.logger.warning(f"Webhook notification failed: {response.status}")
        
        except Exception as e:
            self.logger.error(f"Error sending webhook notification: {e}")
    
    async def _send_telegram_notification(self, alert: Alert) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            severity_emoji = {
                AlertSeverity.LOW: "‚ÑπÔ∏è",
                AlertSeverity.MEDIUM: "‚ö†Ô∏è",
                AlertSeverity.HIGH: "üö®",
                AlertSeverity.CRITICAL: "üí•"
            }
            
            message = (
                f"{severity_emoji.get(alert.severity, '‚ùì')} **{alert.title}**\n\n"
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {alert.description}\n"
                f"**–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {alert.severity.value.upper()}\n"
                f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {alert.source}\n"
                f"**–í—Ä–µ–º—è:** {alert.timestamp.strftime('%d.%m.%Y %H:%M:%S')}"
            )
            
            if alert.metadata:
                message += f"\n**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:** {alert.metadata}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            payload = {
                "chat_id": self.telegram_chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        self.logger.info(f"Telegram notification sent for alert {alert.id}")
                    else:
                        self.logger.warning(f"Telegram notification failed: {response.status}")
        
        except Exception as e:
            self.logger.error(f"Error sending Telegram notification: {e}")
    
    async def _log_alert(self, alert: Alert) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç."""
        log_message = f"ALERT [{alert.severity.value.upper()}] {alert.title}: {alert.description}"
        
        if alert.severity == AlertSeverity.CRITICAL:
            self.logger.critical(log_message)
        elif alert.severity == AlertSeverity.HIGH:
            self.logger.error(log_message)
        elif alert.severity == AlertSeverity.MEDIUM:
            self.logger.warning(log_message)
        else:
            self.logger.info(log_message)
    
    async def resolve_alert(self, alert_id: str) -> bool:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∞–ª–µ—Ä—Ç."""
        if alert_id not in self.alerts:
            return False
        
        alert = self.alerts[alert_id]
        alert.resolved = True
        alert.resolved_at = datetime.now()
        
        self.logger.info(f"Alert {alert_id} resolved")
        return True
    
    def get_active_alerts(self) -> List[Alert]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã."""
        return [alert for alert in self.alerts.values() if not alert.resolved]
    
    def get_alert_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤."""
        total_alerts = len(self.alerts)
        active_alerts = len(self.get_active_alerts())
        
        severity_counts = {}
        for alert in self.alerts.values():
            severity = alert.severity.value
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        return {
            "total_alerts": total_alerts,
            "active_alerts": active_alerts,
            "resolved_alerts": total_alerts - active_alerts,
            "severity_distribution": severity_counts,
            "last_alert_time": max(
                (alert.timestamp for alert in self.alerts.values()),
                default=None
            )
        }
    
    def cleanup_old_alerts(self, max_age: timedelta = timedelta(days=7)) -> int:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã."""
        cutoff_time = datetime.now() - max_age
        
        old_alerts = [
            alert_id for alert_id, alert in self.alerts.items()
            if alert.timestamp < cutoff_time and alert.resolved
        ]
        
        for alert_id in old_alerts:
            del self.alerts[alert_id]
        
        return len(old_alerts)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
alert_manager = AlertManager()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
async def send_error_alert(title: str, description: str, metadata: Dict[str, Any] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ."""
    await alert_manager.send_alert(
        alert_id=f"error_{hash(title)}",
        title=title,
        description=description,
        severity=AlertSeverity.HIGH,
        source="application",
        metadata=metadata
    )


async def send_critical_alert(title: str, description: str, metadata: Dict[str, Any] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç."""
    await alert_manager.send_alert(
        alert_id=f"critical_{hash(title)}",
        title=title,
        description=description,
        severity=AlertSeverity.CRITICAL,
        source="application",
        metadata=metadata
    )


async def send_warning_alert(title: str, description: str, metadata: Dict[str, Any] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∞–ª–µ—Ä—Ç."""
    await alert_manager.send_alert(
        alert_id=f"warning_{hash(title)}",
        title=title,
        description=description,
        severity=AlertSeverity.MEDIUM,
        source="application",
        metadata=metadata
    )


async def send_info_alert(title: str, description: str, metadata: Dict[str, Any] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç."""
    await alert_manager.send_alert(
        alert_id=f"info_{hash(title)}",
        title=title,
        description=description,
        severity=AlertSeverity.LOW,
        source="application",
        metadata=metadata
    )
