from datetime import datetime, timedelta
from typing import Optional, Union
import locale


def format_datetime(dt: Optional[datetime], format_str: str = "%d.%m.%Y %H:%M") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."""
    if dt is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        return dt.strftime(format_str)
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_date(dt: Optional[datetime], format_str: str = "%d.%m.%Y") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É."""
    return format_datetime(dt, format_str)


def format_time(dt: Optional[datetime], format_str: str = "%H:%M") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è."""
    return format_datetime(dt, format_str)


def format_duration(seconds: Union[int, float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if seconds is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        seconds = int(seconds)
        
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            if remaining_seconds == 0:
                return f"{minutes} –º–∏–Ω"
            return f"{minutes} –º–∏–Ω {remaining_seconds} —Å–µ–∫"
        elif seconds < 86400:
            hours = seconds // 3600
            remaining_minutes = (seconds % 3600) // 60
            if remaining_minutes == 0:
                return f"{hours} —á"
            return f"{hours} —á {remaining_minutes} –º–∏–Ω"
        else:
            days = seconds // 86400
            remaining_hours = (seconds % 86400) // 3600
            if remaining_hours == 0:
                return f"{days} –¥"
            return f"{days} –¥ {remaining_hours} —á"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_file_size(size_bytes: Optional[int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if size_bytes is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        size_bytes = int(size_bytes)
        
        if size_bytes < 1024:
            return f"{size_bytes} –ë"
        elif size_bytes < 1024**2:
            return f"{size_bytes / 1024:.1f} –ö–ë"
        elif size_bytes < 1024**3:
            return f"{size_bytes / (1024**2):.1f} –ú–ë"
        else:
            return f"{size_bytes / (1024**3):.1f} –ì–ë"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_number(number: Union[int, float], decimals: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ä–∞–∑—Ä—è–¥–æ–≤."""
    if number is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        if decimals == 0:
            return f"{int(number):,}".replace(",", " ")
        else:
            return f"{float(number):,.{decimals}f}".replace(",", " ")
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_percentage(value: Union[int, float], decimals: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç."""
    if value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        return f"{float(value):.{decimals}f}%"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_currency(amount: Union[int, float], currency: str = "‚ÇΩ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É."""
    if amount is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        formatted_amount = format_number(amount, 2)
        return f"{formatted_amount} {currency}"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_phone(phone: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    if not phone:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = ''.join(filter(str.isdigit, phone))
    
    if len(digits) == 11 and digits.startswith('7'):
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    elif len(digits) == 10:
        return f"+7 ({digits[0:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:10]}"
    else:
        return phone


def format_telegram_username(username: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Telegram username."""
    if not username:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    if username.startswith('@'):
        return username
    else:
        return f"@{username}"


def format_text_preview(text: Optional[str], max_length: int = 100) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã."""
    if not text:
        return "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."


def format_list(items: list, separator: str = ", ", empty_text: str = "–ü—É—Å—Ç–æ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É."""
    if not items:
        return empty_text
    
    return separator.join(str(item) for item in items)


def format_boolean(value: Optional[bool], true_text: str = "–î–∞", false_text: str = "–ù–µ—Ç") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    if value is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    return true_text if value else false_text


def format_status(status: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏."""
    if not status:
        return "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    status_map = {
        "active": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
        "inactive": "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
        "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "processing": "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
    }
    
    return status_map.get(status.lower(), f"‚ùì {status}")


def format_rating(rating: Optional[float], max_rating: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏."""
    if rating is None:
        return "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ"
    
    try:
        rating = float(rating)
        full_stars = int(rating)
        half_star = 1 if rating - full_stars >= 0.5 else 0
        empty_stars = max_rating - full_stars - half_star
        
        result = "‚≠ê" * full_stars
        if half_star:
            result += "üåü"
        result += "‚òÜ" * empty_stars
        
        return f"{result} ({rating:.1f}/{max_rating})"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_age(birth_date: Optional[datetime]) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç."""
    if birth_date is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        today = datetime.now()
        age = today.year - birth_date.year
        
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        
        if age < 0:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
        
        return f"{age} –ª–µ—Ç"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"


def format_relative_time(dt: Optional[datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")."""
    if dt is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        now = datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "–¢–æ–ª—å–∫–æ —á—Ç–æ"
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
